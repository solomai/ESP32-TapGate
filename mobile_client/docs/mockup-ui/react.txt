import React, { useMemo, useState, useRef, useLayoutEffect, useCallback } from "react";
import { Bluetooth, Wifi, Lock, Unlock, ChevronLeft, ChevronRight } from "lucide-react";

// ==========================
// TapGate UI Mock (Portrait & Landscape) — fixes per request
// Fix list:
// 1) Prevent action button from jumping on press (use active:scale instead of translate).
// 2) Dark background like the screenshot (phone frame + page backdrop).
// 3) Action button drawn with teal glassy gradient + glow (no photo overlay).
// ==========================

// Mock data for paired/saved IoT devices
const MOCK_DEVICES = [
  {
    id: "dev-1",
    name: "Gate 1",
    seedColor: "#4f46e5", // unused for button now
    photoUrl:
      "https://images.unsplash.com/photo-1549187774-b4e9b0445b41?q=80&w=180&auto=format&fit=crop",
    bleIdentifier: "AA:BB:CC:11:22:33",
    serviceUuid: "12345678-0000-1000-8000-00805f9b34fb",
    mqttBrokerUrl: "wss://mqtt.example.com:443",
  },
  {
    id: "dev-2",
    name: "Backyard Lock",
    seedColor: "#16a34a",
    photoUrl:
      "https://images.unsplash.com/photo-1562261312-0d5f3a7b3d1a?q=80&w=180&auto=format&fit=crop",
    bleIdentifier: "AA:BB:CC:77:88:99",
    serviceUuid: "87654321-0000-1000-8000-00805f9b34fb",
    mqttBrokerUrl: "ssl://10.0.0.5:8883",
  },
  {
    id: "dev-3",
    name: "Garage",
    seedColor: "#ea580c",
    photoUrl:
      "https://images.unsplash.com/photo-1600585154526-990dced4db0d?q=80&w=180&auto=format&fit=crop",
    bleIdentifier: "AA:BB:CC:44:55:66",
    serviceUuid: "fedcba98-0000-1000-8000-00805f9b34fb",
    mqttBrokerUrl: "wss://broker.hivemq.com:443",
  },
];

function StatusBadge({ icon: Icon, ok, label }) {
  const cls = ok ? "bg-emerald-600 text-white" : "bg-rose-600 text-white";
  return (
    <div className={`inline-flex items-center gap-2 px-2.5 py-1.5 rounded-full text-base font-medium ${cls}`}>
      <Icon className="w-4 h-4" aria-hidden="true" />
      <span>{label}</span>
    </div>
  );
}

function StateBadge({ state }) {
  if (!state) return null;
  const ok = state.toLowerCase() === "opened" || state.toLowerCase() === "open";
  const Icon = ok ? Unlock : Lock;
  const cls = ok ? "bg-amber-500" : "bg-slate-700";
  return (
    <div className={`inline-flex items-center gap-2 px-2.5 py-1.5 rounded-full text-base font-medium text-white ${cls}`}>
      <Icon className="w-4 h-4" aria-hidden="true" />
      <span>{state}</span>
    </div>
  );
}

// Big circular action button that auto-sizes and stays centered
function DoActionButton({ containerRef }) {
  const [btnSize, setBtnSize] = useState(160);

  useLayoutEffect(() => {
    const el = containerRef?.current;
    if (!el || typeof ResizeObserver === "undefined") return;

    const measure = () => {
      const w = el.clientWidth;
      const h = el.clientHeight;
      const s = Math.max(140, Math.min(w, h) - 32); // padding to avoid jitter
      const sBig = Math.min(Math.round(s * 1.32), Math.min(w, h) - 12); // ~+20% but keep inside container
      setBtnSize(sBig);
    };

    measure();
    const ro = new ResizeObserver(measure);
    ro.observe(el);
    window.addEventListener("resize", measure);
    return () => {
      ro.disconnect();
      window.removeEventListener("resize", measure);
    };
  }, [containerRef]);

  // Teal glassy gradient + glow like the screenshot
  const backgroundImage =
    'radial-gradient(100% 140% at 30% 20%, rgba(255,255,255,0.18) 0%, rgba(255,255,255,0.00) 60%), ' +
    'linear-gradient(145deg, #1FE2C5 0%, #12B7B3 55%, #0B8B93 100%)';
  const boxShadow =
    '0 20px 60px rgba(16,185,129,0.35), 0 0 80px rgba(16,185,129,0.20), inset 0 0 0 2px rgba(255,255,255,0.12), inset 0 -10px 40px rgba(0,0,0,0.25)';

  return (
    <button
      aria-label="doAction"
      className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rounded-full ring-1 ring-white/15 active:scale-[0.98] transition-transform duration-75 focus:outline-none"
      style={{ width: btnSize, height: btnSize, backgroundImage, backgroundSize: 'cover', backgroundPosition: 'center', boxShadow }}
      onClick={() => alert("doAction()")}
    />
  );
}

function PhoneFrame({
  orientation = "portrait",
  device,
  bleConnected,
  netConnected,
  deviceState,
  onSelectDevice,
  devices,
}) {
  const frameSize = orientation === "portrait" ? "w-[360px] h-[780px]" : "w-[780px] h-[360px]";

  const accent = device?.seedColor || "#4f46e5";

  // Index helpers to switch devices with chevrons (unchanged)
  const idx = Math.max(0, devices.findIndex((d) => d.id === device?.id));
  const selectByOffset = useCallback(
    (delta) => {
      if (!devices.length) return;
      const nextIndex = (idx + delta + devices.length) % devices.length;
      onSelectDevice(devices[nextIndex].id);
    },
    [idx, devices, onSelectDevice]
  );

  const freeRef = useRef(null);

  return (
    <div
      className={`relative ${frameSize} flex flex-col rounded-[32px] border border-slate-800 bg-[linear-gradient(180deg,#0E1822_0%,#0A111A_100%)] text-slate-100 shadow-xl overflow-hidden`}
      role="region"
      aria-label={`${device?.name || "Device"} (${orientation})`}
    >
      {/* Faux status bar */}
      <div className="h-6 w-full bg-black/60 text-white text-[10px] flex items-center justify-between px-3">
        <span>TapGate • Mock</span>
        <span>{orientation === "portrait" ? "Portrait" : "Landscape"}</span>
      </div>

      {/* Header with device selector */}
      <div className="p-4 flex items-center justify-between gap-3">
        <button
          aria-label="Previous device"
          className="w-12 h-12 rounded-full border border-white/10 bg-white/5 hover:bg-white/10 shadow"
          onClick={() => selectByOffset(-1)}
          title="Previous device"
        >
          <ChevronLeft className="w-6 h-6 mx-auto" aria-hidden="true" />
        </button>

        <div className="flex-1 max-w-[66%] h-14 rounded-2xl overflow-hidden shadow-lg ring-1 ring-white/10 grid place-items-center text-white font-semibold">
          <span className="truncate">{device?.name}</span>
        </div>

        <button
          aria-label="Next device"
          className="w-12 h-12 rounded-full border border-white/10 bg-white/5 hover:bg-white/10 shadow"
          onClick={() => selectByOffset(1)}
          title="Next device"
        >
          <ChevronRight className="w-6 h-6 mx-auto" aria-hidden="true" />
        </button>
      </div>

      {/* BODY */}
      {orientation === "portrait" ? (
        <div className="flex-1 flex flex-col px-6 pb-6">
          <div className="mt-8 flex flex-col items-center gap-3 text-white">
            <StatusBadge icon={Wifi} ok={!!netConnected} label={netConnected ? "Wi‑Fi Online" : "Wi‑Fi Offline"} />
            <StatusBadge icon={Bluetooth} ok={!!bleConnected} label={bleConnected ? "BT Online" : "BT Offline"} />
            <StateBadge state={deviceState} />
          </div>
          <div ref={freeRef} className="relative flex-1">
            <DoActionButton containerRef={freeRef} />
          </div>
        </div>
      ) : (
        <div className="flex-1 flex px-6 pb-6 gap-4">
          <div className="w-56">
            <div className="h-full flex flex-col justify-center gap-3 text-white">
              <StatusBadge icon={Wifi} ok={!!netConnected} label={netConnected ? "Wi‑Fi Online" : "Wi‑Fi Offline"} />
              <StatusBadge icon={Bluetooth} ok={!!bleConnected} label={bleConnected ? "BT Online" : "BT Offline"} />
              <StateBadge state={deviceState} />
            </div>
          </div>
          <div ref={freeRef} className="relative flex-1">
            <DoActionButton containerRef={freeRef} />
          </div>
        </div>
      )}
    </div>
  );
}

export default function TapGateUIMock() {
  const [selectedId, setSelectedId] = useState(MOCK_DEVICES[0].id);
  const device = useMemo(() => MOCK_DEVICES.find((d) => d.id === selectedId), [selectedId]);

  // Simulated connectivity/state
  const [bleConnected, setBleConnected] = useState(false);
  const [netConnected, setNetConnected] = useState(true);
  const [deviceState, setDeviceState] = useState("closed");

  return (
    <div
      className="w-full min-h-screen p-6"
      style={{
        background:
          "radial-gradient(140% 100% at 50% -20%, #0f1c2d 0%, #0b1220 60%, #0a0f1a 100%)",
      }}
    >
      <div className="max-w-[1200px] mx-auto">
        {/* Controls to simulate state changes in the mock (restored) */}
        <div className="mb-4 flex flex-wrap items-center gap-3">
          <div className="text-sm text-slate-300">Simulate:</div>
          <label className="inline-flex items-center gap-2 text-sm">
            <input
              type="checkbox"
              className="accent-emerald-500"
              checked={bleConnected}
              onChange={(e) => setBleConnected(e.target.checked)}
            />
            BLE connected
          </label>
          <label className="inline-flex items-center gap-2 text-sm">
            <input
              type="checkbox"
              className="accent-emerald-500"
              checked={netConnected}
              onChange={(e) => setNetConnected(e.target.checked)}
            />
            Internet online
          </label>
          <select
            className="text-sm border border-white/10 rounded-md px-2 py-1 bg-white/10 text-white"
            aria-label="Device state"
            value={deviceState ?? "null"}
            onChange={(e) => setDeviceState(e.target.value === "null" ? null : e.target.value)}
          >
            <option value="null">state: none</option>
            <option value="opened">state: opened</option>
            <option value="closed">state: closed</option>
          </select>
        </div>
        {/* Side-by-side portrait & landscape stays as before */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 place-items-center">
          <PhoneFrame
            orientation="portrait"
            device={device}
            bleConnected={bleConnected}
            netConnected={netConnected}
            deviceState={deviceState}
            onSelectDevice={setSelectedId}
            devices={MOCK_DEVICES}
          />

          <PhoneFrame
            orientation="landscape"
            device={device}
            bleConnected={bleConnected}
            netConnected={netConnected}
            deviceState={deviceState}
            onSelectDevice={setSelectedId}
            devices={MOCK_DEVICES}
          />
        </div>
      </div>
    </div>
  );
}

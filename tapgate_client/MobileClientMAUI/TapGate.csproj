<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net9.0-android;net9.0-ios;net9.0-maccatalyst</TargetFrameworks>
		<TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net9.0-windows10.0.19041.0</TargetFrameworks>
		<!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->
		<!-- <TargetFrameworks>$(TargetFrameworks);net9.0-tizen</TargetFrameworks> -->

		<!-- Note for MacCatalyst:
		The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
		When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
		The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
		either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
		<!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->

		<OutputType>Exe</OutputType>
		<RootNamespace>TapGate</RootNamespace>
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>

		<!-- Display name -->
		<ApplicationTitle>TapGate</ApplicationTitle>

		<!-- App Identifier -->
		<ApplicationId>tapgate.v1</ApplicationId>

		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>

		<!-- To develop, package, and publish an app to the Microsoft Store, see: https://aka.ms/MauiTemplateUnpackaged -->
		<WindowsPackageType>None</WindowsPackageType>

		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">26.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>
		
		<!-- Protobuf generation settings -->
		<ProtoRoot>..\..\proto</ProtoRoot>
		<ProtobufOutputPath>Core\Messages</ProtobufOutputPath>
	</PropertyGroup>

	<ItemGroup>
		<!-- App Icon -->
		<MauiIcon Include="Resources\AppIcon\appicon.png" />

		<!-- Splash Screen -->
		<!-- <MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />  -->
		<MauiSplashScreen Include="Resources\Splash\splash.png" Color="#000000" BaseSize="256,256" />

		<!-- Images -->
		<MauiImage Include="Resources\Images\*" />
		<MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" />
		
		<!-- Custom Fonts -->
		<MauiFont Include="Resources\Fonts\*" />

		<!-- Raw Assets (also remove the "Resources\Raw" prefix) -->
		<MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" />
		<PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="9.0.5" />
		<PackageReference Include="Google.Protobuf" Version="3.28.3" />
		<PackageReference Include="Grpc.Tools" Version="2.67.0">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<!-- Custom protobuf generation to Core/Messages -->
	<Target Name="GenerateProtobufToSourceFolder" BeforeTargets="BeforeBuild">
		<PropertyGroup>
			<ProtoSourceFile>$(ProtoRoot)\messages.proto</ProtoSourceFile>
			<ProtobufOutputFile>$(ProtobufOutputPath)\Messages.cs</ProtobufOutputFile>
			<!-- Cross-platform protoc path detection -->
			<ProtocToolPath Condition="$([MSBuild]::IsOSPlatform('Windows'))">$(USERPROFILE)\.nuget\packages\grpc.tools\2.67.0\tools\windows_x64\protoc.exe</ProtocToolPath>
			<ProtocToolPath Condition="$([MSBuild]::IsOSPlatform('Linux'))">$(HOME)/.nuget/packages/grpc.tools/2.67.0/tools/linux_x64/protoc</ProtocToolPath>
			<ProtocToolPath Condition="$([MSBuild]::IsOSPlatform('OSX'))">$(HOME)/.nuget/packages/grpc.tools/2.67.0/tools/macosx_x64/protoc</ProtocToolPath>
			<!-- Fallback to system protoc if package not found -->
			<ProtocToolPath Condition="!Exists('$(ProtocToolPath)')">protoc</ProtocToolPath>
		</PropertyGroup>

		<!-- Check if regeneration is needed (file doesn't exist) -->
		<CreateProperty Value="true" Condition="!Exists('$(ProtobufOutputFile)')">
			<Output PropertyName="ProtobufNeedsRegeneration" TaskParameter="Value" />
		</CreateProperty>

		<!-- Ensure output directory exists -->
		<MakeDir Directories="$(ProtobufOutputPath)" Condition="!Exists('$(ProtobufOutputPath)')" />

		<!-- Generate protobuf files if needed -->
		<Message Text="Generating protobuf to $(ProtobufOutputPath) using $(ProtocToolPath)..." Importance="high" 
		         Condition="'$(ProtobufNeedsRegeneration)' == 'true'" />
		
		<Exec Command="&quot;$(ProtocToolPath)&quot; --proto_path=&quot;$(ProtoRoot)&quot; --csharp_out=&quot;$(ProtobufOutputPath)&quot; --csharp_opt=file_extension=.pb.cs &quot;$(ProtoSourceFile)&quot;"
		      Condition="'$(ProtobufNeedsRegeneration)' == 'true'" />
		
		<Message Text="Protobuf files are up to date" Importance="normal" 
		         Condition="'$(ProtobufNeedsRegeneration)' != 'true'" />
	</Target>

	<!-- Manual regeneration target -->
	<Target Name="RegenerateProtobuf">
		<PropertyGroup>
			<ProtoSourceFile>$(ProtoRoot)\messages.proto</ProtoSourceFile>
			<!-- Cross-platform protoc path detection -->
			<ProtocToolPath Condition="$([MSBuild]::IsOSPlatform('Windows'))">$(USERPROFILE)\.nuget\packages\grpc.tools\2.67.0\tools\windows_x64\protoc.exe</ProtocToolPath>
			<ProtocToolPath Condition="$([MSBuild]::IsOSPlatform('Linux'))">$(HOME)/.nuget/packages/grpc.tools/2.67.0/tools/linux_x64/protoc</ProtocToolPath>
			<ProtocToolPath Condition="$([MSBuild]::IsOSPlatform('OSX'))">$(HOME)/.nuget/packages/grpc.tools/2.67.0/tools/macosx_x64/protoc</ProtocToolPath>
			<!-- Fallback to system protoc if package not found -->
			<ProtocToolPath Condition="!Exists('$(ProtocToolPath)')">protoc</ProtocToolPath>
		</PropertyGroup>
		
		<MakeDir Directories="$(ProtobufOutputPath)" Condition="!Exists('$(ProtobufOutputPath)')" />
		<Message Text="Force regenerating protobuf files using $(ProtocToolPath)..." Importance="high" />
		<Exec Command="&quot;$(ProtocToolPath)&quot; --proto_path=&quot;$(ProtoRoot)&quot; --csharp_out=&quot;$(ProtobufOutputPath)&quot; --csharp_opt=file_extension=.pb.cs &quot;$(ProtoSourceFile)&quot;" />
		<Message Text="Protobuf regeneration completed" Importance="high" />
	</Target>

	<!-- Clean generated protobuf files during clean -->
	<Target Name="CleanProtobufFiles" BeforeTargets="Clean">
		<ItemGroup>
			<ProtobufGenerated Include="$(ProtobufOutputPath)\*.pb.cs" />
		</ItemGroup>
		<Delete Files="@(ProtobufGenerated)" ContinueOnError="true" />
		<Message Text="Cleaned generated protobuf files from $(ProtobufOutputPath)" Importance="high" />
	</Target>

	<ItemGroup>
	  <MauiXaml Update="Resources\Styles\ActionButton.xaml">
	    <Generator>MSBuild:Compile</Generator>
	  </MauiXaml>
	  <MauiXaml Update="Resources\Styles\Icons.xaml">
	    <Generator>MSBuild:Compile</Generator>
	  </MauiXaml>
	</ItemGroup>

	<ItemGroup>
	  <Folder Include="Core\Messages\" />
	</ItemGroup>

</Project>

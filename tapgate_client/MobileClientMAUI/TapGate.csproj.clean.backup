<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net9.0-android</TargetFrameworks>
		<!-- Uncomment for multi-platform development when not on Linux -->
		<!-- <TargetFrameworks>net9.0-android;net9.0-ios;net9.0-maccatalyst</TargetFrameworks> -->
		<!-- <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net9.0-windows10.0.19041.0</TargetFrameworks> -->
		<!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->
		<!-- <TargetFrameworks>$(TargetFrameworks);net9.0-tizen</TargetFrameworks> -->

		<!-- Note for MacCatalyst:
		The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
		When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
		The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
		either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
		<!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->

		<OutputType>Exe</OutputType>
		<RootNamespace>TapGate</RootNamespace>
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>

		<!-- Display name -->
		<ApplicationTitle>TapGate</ApplicationTitle>

		<!-- App Identifier -->
		<ApplicationId>tapgate.v1</ApplicationId>

		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>

		<!-- To develop, package, and publish an app to the Microsoft Store, see: https://aka.ms/MauiTemplateUnpackaged -->
		<WindowsPackageType>None</WindowsPackageType>

		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">26.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>
	</PropertyGroup>

	<ItemGroup>
		<!-- App Icon -->
		<MauiIcon Include="Resources\AppIcon\appicon.png" />

		<!-- Splash Screen -->
		<!-- <MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />  -->
		<MauiSplashScreen Include="Resources\Splash\splash.png" Color="#000000" BaseSize="256,256" />

		<!-- Images -->
		<MauiImage Include="Resources\Images\*" />
		<MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" />
		
		<!-- Custom Fonts -->
		<MauiFont Include="Resources\Fonts\*" />

		<!-- Raw Assets (also remove the "Resources\Raw" prefix) -->
		<MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" />
		<PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="9.0.5" />
		<PackageReference Include="Google.Protobuf" Version="3.28.3" />
		<PackageReference Include="Grpc.Tools" Version="2.67.0">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<ItemGroup>
		<Protobuf Include="..\..\proto\messages.proto" ProtoRoot="..\..\proto" GrpcServices="None" />
	</ItemGroup>

	<!-- Include generated protobuf files in compilation -->
	<ItemGroup>
		<Compile Include="Core\Messages\*.cs" Condition="Exists('Core\Messages\')" />
	</ItemGroup>

	<!-- Custom target to ensure protobuf generation happens when needed -->
	<PropertyGroup>
		<ProtoSourceFile>..\..\proto\messages.proto</ProtoSourceFile>
		<ProtoOutputFile>Core\Messages\Messages.g.cs</ProtoOutputFile>
		<ProtoTempOutputFile>obj\Protos\Messages.g.cs</ProtoTempOutputFile>
	</PropertyGroup>

	<Target Name="CheckProtobufGeneration" BeforeTargets="BeforeBuild">
		<PropertyGroup>
			<NeedProtobufGeneration>false</NeedProtobufGeneration>
		</PropertyGroup>
		
		<!-- Check if generated file exists -->
		<PropertyGroup Condition="!Exists('$(ProtoOutputFile)')">
			<NeedProtobufGeneration>true</NeedProtobufGeneration>
		</PropertyGroup>
		
		<!-- Check if proto source file exists -->
		<Error Text="Proto source file not found: $(ProtoSourceFile)" Condition="!Exists('$(ProtoSourceFile)')" />
		
		<!-- Check if proto file is newer than generated file (only if both exist) -->
		<PropertyGroup Condition="Exists('$(ProtoOutputFile)') AND Exists('$(ProtoSourceFile)')">
			<ProtoFileTime>$([System.IO.File]::GetLastWriteTime('$(ProtoSourceFile)').Ticks)</ProtoFileTime>
			<GeneratedFileTime>$([System.IO.File]::GetLastWriteTime('$(ProtoOutputFile)').Ticks)</GeneratedFileTime>
		</PropertyGroup>
		
		<!-- Compare times only if both files exist and times are available -->
		<PropertyGroup Condition="'$(ProtoFileTime)' != '' AND '$(GeneratedFileTime)' != '' AND '$(ProtoFileTime)' &gt; '$(GeneratedFileTime)'">
			<NeedProtobufGeneration>true</NeedProtobufGeneration>
		</PropertyGroup>

		<Message Text="Proto source: $(ProtoSourceFile)" Importance="low" />
		<Message Text="Proto output: $(ProtoOutputFile)" Importance="low" />
		<Message Text="Proto file exists: $([System.IO.File]::Exists('$(ProtoSourceFile)'))" Importance="low" />
		<Message Text="Generated file exists: $([System.IO.File]::Exists('$(ProtoOutputFile)'))" Importance="low" />
		<Message Text="Need protobuf generation: $(NeedProtobufGeneration)" Importance="normal" />
	</Target>

	<!-- Force protobuf generation when needed -->
	<Target Name="ForceProtobufGeneration" BeforeTargets="BeforeBuild;ResolveReferences" Condition="'$(NeedProtobufGeneration)' == 'true'" DependsOnTargets="CheckProtobufGeneration">
		<Message Text="🔄 Proto file changed or output missing - forcing protobuf regeneration..." Importance="high" />
		
		<!-- Ensure output directories exist -->
		<MakeDir Directories="obj\Protos" />
		<MakeDir Directories="Core\Messages" />
		
		<!-- Clean old generated files to force regeneration -->
		<ItemGroup>
			<OldProtoFiles Include="obj\**\Protos\*.cs" />
			<OldProtoFiles Include="Core\Messages\*.cs" />
		</ItemGroup>
		<Delete Files="@(OldProtoFiles)" />
		
		<!-- Find protoc from Grpc.Tools -->
		<PropertyGroup>
			<ProtocPath>/home/codespace/.nuget/packages/grpc.tools/2.67.0/tools/linux_x64/protoc</ProtocPath>
		</PropertyGroup>
		
		<!-- Generate protobuf files directly if protoc is found -->
		<Exec Command="chmod +x &quot;$(ProtocPath)&quot;" Condition="Exists('$(ProtocPath)')" />
		<Exec Command="&quot;$(ProtocPath)&quot; --proto_path=../../proto --csharp_out=obj/Protos --csharp_opt=file_extension=.g.cs ../../proto/messages.proto" 
			  Condition="Exists('$(ProtocPath)')" 
			  ContinueOnError="false" />
		
		<!-- Copy generated file to Core/Messages for easier access -->
		<Copy SourceFiles="$(ProtoTempOutputFile)" 
			  DestinationFiles="$(ProtoOutputFile)" 
			  Condition="Exists('$(ProtoTempOutputFile)')" />
		
		<!-- If direct generation succeeded, mark as not needed -->
		<PropertyGroup Condition="Exists('$(ProtoOutputFile)')">
			<NeedProtobufGeneration>false</NeedProtobufGeneration>
		</PropertyGroup>
		
		<!-- Fallback: Touch the proto file to ensure Grpc.Tools regenerates -->
		<Touch Files="$(ProtoSourceFile)" AlwaysCreate="false" Condition="'$(NeedProtobufGeneration)' == 'true'" />
		
		<Message Text="✅ Protobuf files regenerated and copied to Core/Messages/" Importance="high" Condition="Exists('$(ProtoOutputFile)')" />
		<Message Text="⚠️  Fallback: Grpc.Tools will regenerate during compilation" Importance="normal" Condition="!Exists('$(ProtoOutputFile)')" />
	</Target>

	<!-- Copy protobuf files after Grpc.Tools generation -->
	<Target Name="CopyProtobufFiles" AfterTargets="Build" Condition="Exists('obj\Debug\net9.0-android\Protos\Messages.g.cs')">
		<Message Text="📋 Copying Grpc.Tools generated files to Core/Messages/" Importance="normal" />
		
		<MakeDir Directories="Core\Messages" />
		<Copy SourceFiles="obj\Debug\net9.0-android\Protos\Messages.g.cs" 
			  DestinationFiles="Core\Messages\Messages.g.cs" 
			  SkipUnchangedFiles="true" />
		
		<Message Text="✅ Protobuf files copied from Grpc.Tools output" Importance="normal" />
	</Target>

	<ItemGroup>
	  <MauiXaml Update="Resources\Styles\ActionButton.xaml">
	    <Generator>MSBuild:Compile</Generator>
	  </MauiXaml>
	  <MauiXaml Update="Resources\Styles\Icons.xaml">
	    <Generator>MSBuild:Compile</Generator>
	  </MauiXaml>
	</ItemGroup>

</Project>
